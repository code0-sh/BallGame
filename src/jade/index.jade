doctype html
html
  head
    meta(charset='UTF-8')

    title BallBame

    link(rel='stylesheet', href='css/app.css')
    link(rel='stylesheet', href='css/highlight.pack.css')

  body

    .step 1.
        span.step-discription 不要な記述を削除する。
    
    .mb10
        span.file-title GameScene.swift
        pre
            code.swift
                |import SpriteKit
            code.swift
                |class GameScene: SKScene {
                |     override func didMoveToView(view: SKView) {
                |     }
            code.swift
                |     override func touchesBegan(touches: Set<NSObject>, withEvent event: UIEvent) {
                |           for touch in (touches as! Set<UITouch>) {
                |               let location = touch.locationInNode(self)
                |           }
                |     }
            code.swift
                |     override func update(currentTime: CFTimeInterval) {
                |     }
                |}

    .mb10
        span.file-title GameViewController.swift
        pre
            code.swift
                |import UIKit
                |import SpriteKit
            code.swift
                |class GameViewController: UIViewController {
                |    override func viewDidLoad() {
                |        super.viewDidLoad()
                |    }
            code.swift
                |    override func shouldAutorotate() -> Bool {
                |        return true
                |    }
            code.swift
                |    override func supportedInterfaceOrientations() -> Int {
                |        if UIDevice.currentDevice().userInterfaceIdiom == .Phone {
                |            return Int(UIInterfaceOrientationMask.AllButUpsideDown.rawValue)
                |        } else {
                |            return Int(UIInterfaceOrientationMask.All.rawValue)
                |        }
                |    }
            code.swift
                |    override func didReceiveMemoryWarning() {
                |        super.didReceiveMemoryWarning()
                |    }
            code.swift
                |    override func prefersStatusBarHidden() -> Bool {
                |        return true
                |    }
                |}

    .step 2.
        span.step-discription ビュー上にシーンを表示する。

    .mb10
        span.file-title GameViewController.swift
        pre
            code.swift
                |import UIKit
                |import SpriteKit
            code.swift
                |class GameViewController: UIViewController {
                |    override func viewDidLoad() {
                |        super.viewDidLoad()
                |        // シーンの作成
                |        let scene = GameScene()
                |        // View ControllerのViewをSKView型として取り出す
                |        let view = self.view as! SKView
                |        // FPSの表示
                |        view.showsFPS = true
                |        // ノード数の表示
                |        view.showsNodeCount = true
                |        // シーンのサイズをビューに合わせる
                |        scene.size = view.frame.size
                |        // ビュー上にシーンを表示
                |        view.presentScene(scene)
                |    }
            code.swift
                |    override func shouldAutorotate() -> Bool {
                |        return true
                |    }
            code.swift
                |    override func supportedInterfaceOrientations() -> Int {
                |        if UIDevice.currentDevice().userInterfaceIdiom == .Phone {
                |            return Int(UIInterfaceOrientationMask.AllButUpsideDown.rawValue)
                |        } else {
                |            return Int(UIInterfaceOrientationMask.All.rawValue)
                |        }
                |    }
            code.swift
                |    override func didReceiveMemoryWarning() {
                |        super.didReceiveMemoryWarning()
                |    }
            code.swift
                |    override func prefersStatusBarHidden() -> Bool {
                |        return true
                |    }
                |}

    .step 3.
        span.step-discription ボールを配置する。

    .mb10
        span.file-title GameScene.swift
        pre
            code.swift
                |import SpriteKit
            code.swift
                |class GameScene: SKScene {
                |     var ballColor: [CGFloat] = [0, 0, 0] // ボールの色
                |     var ballCollection: [SKShapeNode] = [];
            code.swift
                |     func initObjects(){
                |         for i in 0..<10 {
                |             var radius: CGFloat = 20
                |             var ball = SKShapeNode(circleOfRadius:radius)
                |             ball.fillColor = UIColor(red: self.ballColor[0], green: self.ballColor[1], blue: self.ballColor[2], alpha: 1)
                |             // ランダムに配置
                |             var randIntX = radius + (CGFloat)(arc4random_uniform((UInt32)(self.frame.width-radius*2)))
                |             var randIntY = radius + (CGFloat)(arc4random_uniform((UInt32)(self.frame.height-radius*2)))
                |             ball.position = CGPoint(x:randIntX, y:randIntY)
                |             self.addChild(ball)
                |             self.ballCollection.append(ball)
                |         }
                |     }
            code.swift
                |     override func didMoveToView(view: SKView) {
                |        // 初期化処理
                |        self.initObjects()
                |     }
            code.swift
                |     override func touchesBegan(touches: Set<NSObject>, withEvent event: UIEvent) {
                |           for touch in (touches as! Set<UITouch>) {
                |               let location = touch.locationInNode(self)
                |           }
                |     }
            code.swift
                |     override func update(currentTime: CFTimeInterval) {
                |     }
                |}

    .step 4.
        span.step-discription シーンとボールに重力を設定する。

    .mb10
        span.file-title GameScene.swift
        pre
            code.swift
                |import SpriteKit
            code.swift
                |class GameScene: SKScene, SKPhysicsContactDelegate {
                |     var ballColor: [CGFloat] = [0, 0, 0] // ボールの色
                |     var ballCollection: [SKShapeNode] = [];
            code.swift
                |     func initObjects(){
                |         for i in 0..<10 {
                |             var radius: CGFloat = 20
                |             var ball = SKShapeNode(circleOfRadius:radius)
                |             ball.fillColor = UIColor(red: self.ballColor[0], green: self.ballColor[1], blue: self.ballColor[2], alpha: 1)
                |             // ランダムに配置
                |             var randIntX = radius + (CGFloat)(arc4random_uniform((UInt32)(self.frame.width-radius*2)))
                |             var randIntY = radius + (CGFloat)(arc4random_uniform((UInt32)(self.frame.height-radius*2)))
                |             ball.position = CGPoint(x:randIntX, y:randIntY)
                |           　// ボールに重力を設定
                |           　ball.physicsBody = SKPhysicsBody(circleOfRadius: radius)
                |           　ball.physicsBody?.restitution = 1.0 // 反発係数
                |           　ball.physicsBody?.linearDamping = 0.0 // 空気抵抗
                |           　ball.physicsBody?.mass = 1.0 // 質量
                |           　ball.physicsBody?.friction = 0.0 // 摩擦
                |           　ball.physicsBody?.contactTestBitMask = 1
                |             self.addChild(ball)
                |             self.ballCollection.append(ball)
                |         }
                |     }
            code.swift
                |     override func didMoveToView(view: SKView) {
                |        // 初期化処理
                |        self.initObjects()
                |        // シーンに重力を設定
                |        self.physicsWorld.gravity = CGVector(dx: 0.0, dy: -3.0)
                |        self.physicsWorld.contactDelegate = self
                |        self.physicsBody = SKPhysicsBody(edgeLoopFromRect: CGRect(x: 0, y: 0, width: frame.width, height: frame.height))
                |        self.physicsBody?.restitution = 1.0 // 反発係数
                |        self.physicsBody?.linearDamping = 0.0 // 空気抵抗
                |        self.physicsBody?.friction = 0.0 // 摩擦
                |        self.name = "frame"
                |     }
            code.swift
                |     override func touchesBegan(touches: Set<NSObject>, withEvent event: UIEvent) {
                |           for touch in (touches as! Set<UITouch>) {
                |               let location = touch.locationInNode(self)
                |           }
                |     }
            code.swift
                |     override func update(currentTime: CFTimeInterval) {
                |     }
                |}

    .step 5.
        span.step-discription パーティクルを設定する。
        <br> ConflictParticle.sksを追加

    .mb10
        span.file-title GameScene.swift
        pre
            code.swift
                |import SpriteKit
            code.swift
                |class GameScene: SKScene, SKPhysicsContactDelegate {
                |     var ballColor: [CGFloat] = [0, 0, 0] // ボールの色
                |     var ballCollection: [SKShapeNode] = [];
            code.swift
                |     func initObjects(){
                |         for i in 0..<10 {
                |             var radius: CGFloat = 20
                |             var ball = SKShapeNode(circleOfRadius:radius)
                |             ball.fillColor = UIColor(red: self.ballColor[0], green: self.ballColor[1], blue: self.ballColor[2], alpha: 1)
                |             // ランダムに配置
                |             var randIntX = radius + (CGFloat)(arc4random_uniform((UInt32)(self.frame.width-radius*2)))
                |             var randIntY = radius + (CGFloat)(arc4random_uniform((UInt32)(self.frame.height-radius*2)))
                |             ball.position = CGPoint(x:randIntX, y:randIntY)
                |           　// ボールに重力を設定
                |           　ball.physicsBody = SKPhysicsBody(circleOfRadius: radius)
                |           　ball.physicsBody?.restitution = 1.0 // 反発係数
                |           　ball.physicsBody?.linearDamping = 0.0 // 空気抵抗
                |           　ball.physicsBody?.mass = 1.0 // 質量
                |           　ball.physicsBody?.friction = 0.0 // 摩擦
                |           　ball.physicsBody?.contactTestBitMask = 1
                |             self.addChild(ball)
                |             self.ballCollection.append(ball)
                |         }
                |     }
            code.swift
                |     func didBeginContact(contact: SKPhysicsContact) {
                |         if let nodeA = contact.bodyA.node {
                |             if let nodeB = contact.bodyB.node {
                |                 if nodeA.name == "frame" || nodeB.name == "frame" {
                |                     // 壁との衝突
                |                     return
                |                 }else {
                |                     // ボール同士の衝突
                |                     // パーティクル生成
                |                     let particle = SKEmitterNode(fileNamed: "ConflictParticle.sks")
                |                     self.addChild(particle)
                |                     
                |                     // ぶつかるたびにパーティクルが増えて処理が重くなるため
                |                     // パーティクルを表示してから0.1秒後に削除する
                |                     var removeAction = SKAction.removeFromParent()
                |                     var durationAction = SKAction.waitForDuration(0.1)
                |                     var sequenceAction = SKAction.sequence([durationAction, removeAction])
                |                     particle.runAction(sequenceAction)
                |                     
                |                     // ボールの位置にパーティクルを移動
                |                     particle.position = CGPoint(x: nodeA.position.x, y: nodeA.position.y)
                |                     particle.alpha = 1
                |                     
                |                     var fadeAction = SKAction.fadeAlphaBy(0, duration: 0.5)
                |                     particle.runAction(fadeAction)
                |                 }
                |             }
                |         }
                |     }
            code.swift
                |     override func didMoveToView(view: SKView) {
                |        // 初期化処理
                |        self.initObjects()
                |        // シーンに重力を設定
                |        self.physicsWorld.gravity = CGVector(dx: 0.0, dy: -3.0)
                |        self.physicsWorld.contactDelegate = self
                |        self.physicsBody = SKPhysicsBody(edgeLoopFromRect: CGRect(x: 0, y: 0, width: frame.width, height: frame.height))
                |        self.physicsBody?.restitution = 1.0 // 反発係数
                |        self.physicsBody?.linearDamping = 0.0 // 空気抵抗
                |        self.physicsBody?.friction = 0.0 // 摩擦
                |        self.name = "frame"
                |     }
            code.swift
                |     override func touchesBegan(touches: Set<NSObject>, withEvent event: UIEvent) {
                |           for touch in (touches as! Set<UITouch>) {
                |               let location = touch.locationInNode(self)
                |           }
                |     }
            code.swift
                |     override func update(currentTime: CFTimeInterval) {
                |     }
                |}
    .step 6.
        span.step-discription 端末の加速度を取得してボールの色を変化させる。

    .mb10
        span.file-title GameScene.swift
        pre
            code.swift
                |import SpriteKit
                |import CoreMotion
            code.swift
                |class GameScene: SKScene, SKPhysicsContactDelegate {
                |     var motionManager: CMMotionManager!  // CMMotionManagerを格納する変数
                |     var ballColor: [CGFloat] = [0, 0, 0] // ボールの色
                |     var ballCollection: [SKShapeNode] = [];
            code.swift
                |     func initObjects(){
                |         for i in 0..<10 {
                |             var radius: CGFloat = 20
                |             var ball = SKShapeNode(circleOfRadius:radius)
                |             ball.fillColor = UIColor(red: self.ballColor[0], green: self.ballColor[1], blue: self.ballColor[2], alpha: 1)
                |             // ランダムに配置
                |             var randIntX = radius + (CGFloat)(arc4random_uniform((UInt32)(self.frame.width-radius*2)))
                |             var randIntY = radius + (CGFloat)(arc4random_uniform((UInt32)(self.frame.height-radius*2)))
                |             ball.position = CGPoint(x:randIntX, y:randIntY)
                |           　// ボールに重力を設定
                |           　ball.physicsBody = SKPhysicsBody(circleOfRadius: radius)
                |           　ball.physicsBody?.restitution = 1.0 // 反発係数
                |           　ball.physicsBody?.linearDamping = 0.0 // 空気抵抗
                |           　ball.physicsBody?.mass = 1.0 // 質量
                |           　ball.physicsBody?.friction = 0.0 // 摩擦
                |           　ball.physicsBody?.contactTestBitMask = 1
                |             self.addChild(ball)
                |             self.ballCollection.append(ball)
                |         }
                |     }
            code.swift
                |     func didBeginContact(contact: SKPhysicsContact) {
                |         if let nodeA = contact.bodyA.node {
                |             if let nodeB = contact.bodyB.node {
                |                 if nodeA.name == "frame" || nodeB.name == "frame" {
                |                     // 壁との衝突
                |                     return
                |                 }else {
                |                     // ボール同士の衝突
                |                     // パーティクル生成
                |                     let particle = SKEmitterNode(fileNamed: "ConflictParticle.sks")
                |                     self.addChild(particle)
                |                     
                |                     // ぶつかるたびにパーティクルが増えて処理が重くなるため
                |                     // パーティクルを表示してから0.1秒後に削除する
                |                     var removeAction = SKAction.removeFromParent()
                |                     var durationAction = SKAction.waitForDuration(0.1)
                |                     var sequenceAction = SKAction.sequence([durationAction, removeAction])
                |                     particle.runAction(sequenceAction)
                |                     
                |                     // ボールの位置にパーティクルを移動
                |                     particle.position = CGPoint(x: nodeA.position.x, y: nodeA.position.y)
                |                     particle.alpha = 1
                |                     
                |                     var fadeAction = SKAction.fadeAlphaBy(0, duration: 0.5)
                |                     particle.runAction(fadeAction)
                |                 }
                |             }
                |         }
                |     }
            code.swift
                |     override func didMoveToView(view: SKView) {
                |        // 初期化処理
                |        self.initObjects()
                |        // シーンに重力を設定
                |        self.physicsWorld.gravity = CGVector(dx: 0.0, dy: -3.0)
                |        self.physicsWorld.contactDelegate = self
                |        self.physicsBody = SKPhysicsBody(edgeLoopFromRect: CGRect(x: 0, y: 0, width: frame.width, height: frame.height))
                |        self.physicsBody?.restitution = 1.0 // 反発係数
                |        self.physicsBody?.linearDamping = 0.0 // 空気抵抗
                |        self.physicsBody?.friction = 0.0 // 摩擦
                |        self.name = "frame"
            code.swift    
                |        // CMMotionManagerを生成
                |        motionManager = CMMotionManager()
                |        // 加速度の値の取得間隔を設定する
                |        motionManager.accelerometerUpdateInterval = 0.1
                |        // ハンドラを設定する
                |        let accelerometerHandler = {
                |            (data:CMAccelerometerData!, error:NSError!)-> Void in
                |            println("x:\(data.acceleration.x) y:\(data.acceleration.y) z:\(data.acceleration.z)")
                |            self.ballColor = [(CGFloat)(abs(data.acceleration.x)), (CGFloat)(abs(data.acceleration.y)), (CGFloat)(abs(data.acceleration.z))]
                |        }
                |        // 取得開始して、上記で設定したハンドラを呼び出し、ログを表示する
                |        motionManager.startAccelerometerUpdatesToQueue(NSOperationQueue.currentQueue(), withHandler: accelerometerHandler)
                |     }
            code.swift
                |     override func touchesBegan(touches: Set<NSObject>, withEvent event: UIEvent) {
                |           for touch in (touches as! Set<UITouch>) {
                |               let location = touch.locationInNode(self)
                |           }
                |     }
            code.swift
                |     override func update(currentTime: CFTimeInterval) {
                |       for ball in ballCollection {
                |           ball.fillColor = UIColor(red: self.ballColor[0], green: self.ballColor[1], blue: self.ballColor[2], alpha: 1)
                |       }
                |     }
                |}

    script(src='js/react-with-addons-0.13.1.js')
    script(src='js/bundle.js')
    script(src='js/highlight.pack.js')
    script(type="text/javascript").
        hljs.initHighlightingOnLoad();
